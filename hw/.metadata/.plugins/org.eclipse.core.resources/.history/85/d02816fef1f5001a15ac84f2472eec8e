import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import java.util.Scanner;

public class TicTacToe {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		System.out.println("Welcome to TicTacToe!");
		System.out.println("Here is the game board:");
		char[][] gameBoard = new char[][] {{'+', '-', '-', '+', '-', '-', '+', '-', '-', '+'},
							               {'|', '1', ' ', '|', '2', ' ', '|', '3', ' ', '|'},
							               {'+', '-', '-', '+', '-', '-', '+', '-', '-', '+'},
							               {'|', '4', ' ', '|', '5', ' ', '|', '6', ' ', '|'},
							               {'+', '-', '-', '+', '-', '-', '+', '-', '-', '+'},
							               {'|', '7', ' ', '|', '8', ' ', '|', '9', ' ', '|'},
							               {'+', '-', '-', '+', '-', '-', '+', '-', '-', '+'}};
							      
		printGameBoard(gameBoard);
		clearGameBoard(gameBoard);
		
		System.out.println("Please choose X or O plays first:");
		char player = playFirst();
		char winner = ' '; 
		Scanner sc =  new Scanner(System.in);
	
		
		//System.out.println("Player " + Character.toString(player) + " plays first. Please enter a 1-9 number:\n");
		
		while (winner == ' ') {
			int placeSuc = 0;
			System.out.println("Player " + Character.toString(player) + "'s turn. Please enter a 1-9 number:\n");
			int input;
			try {
				input = sc.nextInt();
				if(input <= 0 || input >= 10) {
					System.out.println("Invalid input. Please enter a number between 1-9:");
					continue;
				}
			} catch(InputMismatchException e) {
				System.out.println("Invalid input. Please enter a number between 1-9:");
				sc.next();
				continue;
			}
			placeSuc = placeInput(input, gameBoard, player);
			printGameBoard(gameBoard);
			if(placeSuc == 1) {
				player = switchPlayer(player);
				winner = checkWinner(gameBoard, player);
			}
		}
		
		System.out.println("Player" + winner +"wins!");
	}
	
	public static void printGameBoard(char[][] gameBoard) {
		for(char[] row: gameBoard) {
			for(char c: row) {
				System.out.print(c);
			}
			System.out.println();
		}
				
	}
	
	public static void clearGameBoard(char[][] gameBoard) {
		for(int i = 1; i <= 5; i += 2) {
			for(int j = 1; j <= 7; j += 3) {
				gameBoard[i][j] = ' ';
			}
		}
	}
	
	public static char playFirst() {
		Scanner sc =  new Scanner(System.in);
		String input = null;
		while(true) {
			try {
				input = sc.next();
				if(!(input.equals(Character.toString('O')) || input.equals(Character.toString('X')))) {
					System.out.println("a Invalid input. Please enter 'O' or 'X':");
				    continue;
				}
			} catch (NoSuchElementException e) {
				System.out.println("Invalid input. Please enter 'O' or 'X':");
			}
			return input.charAt(0);
		}
	}
	
	public static int placeInput(int input, char[][] gameBoard, char player) {
		switch (input) {
		case 1:
			if(gameBoard[1][1] != ' ') {
				System.out.println("This slot is already occupied. Please re-enter a valid number:");
				return 0;
			} else {
				gameBoard[1][1] = player;
				return 1;
			}
		case 2:
			if(gameBoard[1][4] != ' ') {
				System.out.println("This slot is already occupied. Please re-enter a valid number:");
				return 0;
			} else {
				gameBoard[1][4] = player;
				return 1;
			}
		case 3:
			if(gameBoard[1][7] != ' ') {
				System.out.println("This slot is already occupied. Please re-enter a valid number:");
				return 0;
			} else {
				gameBoard[1][7] = player;
				return 1;
			}
		case 4:
			if(gameBoard[3][1] != ' ') {
				System.out.println("This slot is already occupied. Please re-enter a valid number:");
				return 0;
			} else {
				gameBoard[3][1] = player;
				return 1;
			}
		case 5:
			if(gameBoard[3][4] != ' ') {
				System.out.println("This slot is already occupied. Please re-enter a valid number:");
				return 0;
			} else {
				gameBoard[3][4] = player;
				return 1;
			}
		case 6:
			if(gameBoard[3][7] != ' ') {
				System.out.println("This slot is already occupied. Please re-enter a valid number:");
				return 0;
			} else {
				gameBoard[3][7] = player;
				return 1;
			}
		case 7:
			if(gameBoard[5][1] != ' ') {
				System.out.println("This slot is already occupied. Please re-enter a valid number:");
				return 0;
			} else {
				gameBoard[5][1] = player;
				return 1;
			}
		case 8:
			if(gameBoard[5][4] != ' ') {
				System.out.println("This slot is already occupied. Please re-enter a valid number:");
				return 0;
			} else {
				gameBoard[5][4] = player;
				return 1;
			}
		case 9:
			if(gameBoard[5][7] != ' ') {
				System.out.println("This slot is already occupied. Please re-enter a valid number:");
				return 0;
			} else {
				gameBoard[5][7] = player;
				return 1;
			}
		default: return 0;
		}
	}
	
	public static char switchPlayer(char player) {
		if(player == 'O') {
			player = 'X';
		} else {
			player = 'O';
		}
		return player;
	}
	
	public static char checkWinner(char[][] gameBoard, char player) {
		System.out.println(gameBoard[0][0]);
		if ((gameBoard[1][1] == gameBoard[0][1] && gameBoard[1][1] == gameBoard[0][2]) ||
			(gameBoard[1][1] == gameBoard[1][0] && gameBoard[1][1] == gameBoard[2][0]) ||
			(gameBoard[1][1] == gameBoard[1][1] && gameBoard[1][1] == gameBoard[2][2]) ||
			(gameBoard[1][0] == gameBoard[1][1] && gameBoard[1][0] == gameBoard[1][2]) ||
			(gameBoard[2][0] == gameBoard[2][1] && gameBoard[2][0] == gameBoard[2][2]) ||
			(gameBoard[0][1] == gameBoard[1][1] && gameBoard[0][1] == gameBoard[2][1]) ||
			(gameBoard[0][2] == gameBoard[1][2] && gameBoard[0][2] == gameBoard[2][2]) ||
			(gameBoard[0][2] == gameBoard[1][1] && gameBoard[0][2] == gameBoard[2][0])) {
			return player;
		} else {
			return ' ';
		}
	}

}
